@page
@model CS3750Assignment1.Pages.Calendars.CalendarStudentModel

@{
    ViewData["Title"] = "Student Calendar";
}

@*The following code is from fullcalendar's website at https://fullcalendar.io/docs/initialize-globals*@
<head>
    <meta charset='utf-8' />
    <script src='https://cdn.jsdelivr.net/npm/fullcalendar@6.1.15/index.global.min.js'></script>
    <script>
        //javascript script for loading the calendar on the page
        document.addEventListener('DOMContentLoaded', function() {
          var calendarEl = document.getElementById('calendar'); //variable for the calendar element
          //get student registered courses
          var courses = @Html.Raw(Json.Serialize(Model.RegisteredCourses));
          var assignments = @Html.Raw(Json.Serialize(Model.Assignment));
          var courseEvents = [];
          
          //console.log(courses.length);
          for(var x = 0; x < courses.length; x++)
          {
              //console.log(courses[x].meetingTime[0], " ", courses[x].meetingTime[1]);
              var classStart = courses[x].meetingTime[0];
              var classEnd = courses[x].meetingTime[1];
              var classDays = courses[x].meetingDays.map(function(day){
                  return mapDayToWeekday(day);
              }); //This should create an array with the full calendar mapped week days

              courseEvents.push(
              {
                  title: courses[x].courseName,
                  daysOfWeek: classDays,
                  startTime: classStart,
                  endTime: classEnd,
                  startRecur: '2025-01-06',
                  endRecur: '2025-04-19',
                  color: 'Blue'
              });

          };

          for (var x = 0; x < assignments.length; x++)
          {
              let hrs = parseInt(assignments[x].dueTime.substring(0, 2));
              let mins = assignments[x].dueTime.substring(3, 5);
              let modifier = assignments[x].dueTime.substring(5);

              if (modifier == 'pm')
              {
                  hrs += 12;
              }

              const testDate = new Date(assignments[x].dueDate + ' ' + hrs + ':' + mins + ':00');
              var assignmentDueDateISO = testDate.toISOString(); //convert the date and time into an ISO8601 datetime for better use in the calendar. will likely break when daylight savings hits
              const endDate = new Date(assignments[x].dueDate + ' ' + hrs + ':' + mins + ':01');
              var assignmentDueDateISOEND = endDate.toISOString();


              courseEvents.push(
              {
                  title: assignments[x].title,
                  start: assignmentDueDateISO,
                  end: assignmentDueDateISOEND, //I hate that I resorted to this but it works
                  allDay: false,
                  color: 'Green' //assignments will be green, classes will be blue
              });

          }


          var calendar = new FullCalendar.Calendar(calendarEl, {
            initialView: 'dayGridMonth', //not sure which views are possible, dayGridMonth is probably the initial view we want for LMS 
            events: courseEvents
          });
       
          calendar.render();
        });

        //little function to map days of the week to numbers for FullCalendar
        function mapDayToWeekday(day) {
          const dayMap = {
            'Sunday': 0,
            'Monday': 1,
            'Tuesday': 2,
            'Wednesday': 3,
            'Thursday': 4,
            'Friday': 5,
            'Saturday': 6
          };
          return dayMap[day];
        }

    </script>
</head>

<body>
    <h1>Calendar</h1>

    <div id='calendar'></div>
</body>


@*
<h1>CalendarStudent</h1>

<p>
    <a asp-page="Create">Create New</a>
</p>
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Registration[0].Course)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Registration[0].Account)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model.Registration) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Course.Location)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Account.AccountRole)
            </td>
            <td>
                <a asp-page="./Edit" asp-route-id="@item.Id">Edit</a> |
                <a asp-page="./Details" asp-route-id="@item.Id">Details</a> |
                <a asp-page="./Delete" asp-route-id="@item.Id">Delete</a>
            </td>
        </tr>
}
    </tbody>
</table>*@
